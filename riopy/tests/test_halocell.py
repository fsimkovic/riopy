
import unittest

from riopy.halocell import HaloCell

class HaloCellTest(unittest.TestCase):
    def test_ops_1(self):
        mate_ops = HaloCell.ops(0)
        self.assertListEqual([(0, 0, 0)], mate_ops)

    def test_ops_2(self):
        mate_ops = HaloCell.ops(1)
        true_ops = [(0, 1, 1), (1, -1, -1), (1, 0, 1), (1, -1, 0), (-1, 1, -1), (1, 1, -1), (0, 0, -1), (0, -1, -1), (1,
            0, 0), (-1, 0, 1), (-1, 0, 0), (-1, 0, -1), (0, 0, 1), (0, -1, 1), (0, 0, 0), (0, -1, 0), (1, 1, 1), (-1, 1,
                0), (1, 1, 0), (-1, 1, 1), (-1, -1, 1), (1, 0, -1), (-1, -1, 0), (1, -1, 1), (0, 1, 0), (0, 1, -1), (-1,
                    -1, -1)]
        self.assertListEqual(true_ops, mate_ops)

    def test_ops_3(self):
        mate_ops = HaloCell.ops(2)
        true_ops = [(2, 1, -1), (1, -1, -2), (-1, -1, -2), (2, 2, -2), (0, 2, 1), (2, 2, 2), (-2, 0, 1), (2, -1, 2), (0,
            0, -1), (2, 0, 1), (1, 2, 0), (-2, -1, 1), (-2, 1, -2), (-2, 1, 0), (1, 2, 2), (-1, 0, 0), (-1, 2, 1), (2,
                -1, 1), (-1, 1, 1), (1, 2, -2), (-2, 1, 1), (2, 1, -2), (1, -1, 0), (-1, -2, -1), (2, 0, 2), (0, 1, 0),
            (1, -1, 2), (-1, -1, -1), (-2, -1, -2), (-2, 2, -1), (-1, 2, 0), (0, 1, 2), (-2, -1, -1), (1, 0, 1), (1, 0,
                -1), (1, -2, 0), (-1, 1, -2), (2, -1, -2), (-2, -2, 0), (-1, 0, 2), (-2, 1, -1), (-2, 0, 0), (2, 2, 1),
            (1, -2, 1), (2, 2, -1), (-2, 2, 2), (2, 0, -1), (0, 0, 1), (-2, 2, -2), (-2, -2, 1), (1, 1, -2), (0, -2, 0),
            (-2, 0, -2), (-2, -2, -1), (1, 1, 0), (0, -2, 2), (-1, -1, 1), (1, -2, 2), (2, 1, 1), (0, 2, -2), (1, 0,
                -2), (1, 1, 2), (0, -1, 0), (-2, 2, 1), (2, -2, 2), (0, 2, 2), (0, 2, 0), (1, 1, -1), (0, 0, -2), (0,
                    -1, -2), (1, -2, -1), (0, -2, 1), (-2, 0, -1), (2, 0, 0), (1, 2, 1), (-1, -2, 2), (-1, 0, -2), (-1,
                        1, 2), (0, -1, 2), (-1, -2, 0), (-1, 2, -2), (-1, 2, 2), (-1, 1, 0), (0, -2, -2), (2, -2, 0),
                    (-1, -2, 1), (1, -1, 1), (1, 0, 2), (0, 1, -2), (0, 1, 1), (0, -1, -1), (-1, 1, -1), (1, -1, -1),
                    (-2, 2, 0), (2, -1, -1), (1, 0, 0), (-1, -1, 0), (-2, -2, -2), (-2, -2, 2), (-1, 2, -1), (-2, -1,
                        2), (-1, 0, 1), (0, 2, -1), (2, -2, -1), (0, -2, -1), (1, 2, -1), (-1, -2, -2), (1, -2, -2),
                    (-1, 0, -1), (0, 0, 2), (2, 2, 0), (0, -1, 1), (0, 0, 0), (2, 1, 2), (0, 1, -1), (1, 1, 1), (-2, 0,
                        2), (2, 0, -2), (2, -2, 1), (-1, -1, 2), (2, 1, 0), (2, -2, -2), (-2, 1, 2), (-2, -1, 0), (2,
                            -1, 0)]
        self.assertListEqual(true_ops, mate_ops)

    def test_ops_4(self):
        mate_ops = HaloCell.ops(3)
        true_ops = [(3, 0, 3), (1, -3, 1), (1, -2, -2), (0, 2, 1), (-1, 3, 2), (-2, 3, 0), (3, -2, -3), (0, 3, -1), (1,
            2, 0), (2, -3, -2), (-3, -3, -1), (3, -2, -1), (1, 1, -3), (0, -3, 0), (-2, 0, 0), (0, 0, -2), (-1, 1, 1),
            (-1, 2, 2), (1, -1, 0), (0, 1, -3), (0, 1, 0), (-1, -1, -1), (1, 0, 3), (2, -2, 0), (-3, -3, -2), (0, -2,
                -3), (-2, 1, -1), (1, 2, -3), (1, -1, 1), (3, 1, -3), (-2, 3, 2), (-3, 2, 3), (-1, 0, 2), (-2, 1, 2),
            (0, -2, 0), (1, 1, 0), (3, 0, 1), (-2, -1, 1), (0, 1, -1), (-3, 3, -2), (2, -3, -1), (3, -3, 2), (1, -3, 0),
            (-2, -2, 3), (0, 2, 0), (2, 1, -3), (-2, -3, 3), (1, -2, -1), (0, -3, 1), (3, 1, 3), (1, 2, 1), (2, -3, 0),
            (0, 2, -2), (-2, 1, 3), (-1, 1, -1), (1, -2, 1), (0, 1, -2), (-3, -2, 2), (0, 1, 1), (1, -1, -2), (0, -1,
                -3), (3, 3, 0), (1, 0, 0), (1, -3, -2), (0, -1, 2), (1, 2, -2), (2, 2, -1), (3, -1, 2), (0, -3, -1),
            (-3, -1, -3), (-3, -2, 0), (-2, -3, 2), (0, -2, 3), (2, -2, 3), (1, 1, 3), (-2, -2, 0), (-3, 3, -3), (3, 0,
                2), (-2, 1, -3), (3, 0, 0), (3, -3, 1), (-1, -1, -2), (3, -1, -3), (-1, -2, -2), (1, -3, 3), (0, 2, 3),
            (-1, 0, 1), (2, 0, 1), (0, -3, 2), (3, 1, 2), (1, 2, 2), (-2, 3, 3), (-2, 2, 3), (2, -1, 1), (3, -3, 0),
            (-3, -2, -1), (1, 2, -1), (-2, 1, 1), (-2, -1, -2), (-1, 0, -1), (1, -1, 2), (2, 3, 3), (2, -2, -1), (0, 1,
                2), (-2, -1, -3), (1, 0, 1), (1, 0, -1), (-2, 1, -2), (-2, 3, 1), (2, -3, 1), (-2, -1, 0), (1, 3, -2),
            (-1, -2, -3), (0, 3, 0), (-3, 0, 3), (2, 2, 0), (0, 3, 1), (-1, -2, 1), (1, 1, -1), (-1, 0, -2), (-2, -2,
                -1), (-1, -3, 3), (0, -2, 2), (0, 2, -1), (1, -2, 0), (1, 1, 2), (3, -2, 2), (-3, 0, 1), (2, 1, -2),
            (-1, -3, 2), (-3, -3, 1), (1, -2, -3), (-3, 3, 0), (0, -1, -2), (2, 2, -3), (1, 1, -2), (-1, 3, -1), (0, -1,
                3), (0, 2, 2), (2, 0, 0), (0, -3, 3), (3, 1, 1), (1, 2, 3), (-1, -3, -1), (-3, -3, -3), (-1, 2, -1), (2,
                    -1, 2), (0, -2, -2), (2, 3, 0), (-1, 0, -3), (-3, 1, -3), (-1, 1, 0), (1, -2, 3), (-1, -1, 3), (0,
                        1, 3), (0, 3, -3), (-1, -2, 0), (-3, 0, -1), (-1, -2, 3), (3, 2, 1), (-3, 0, 0), (3, 2, -2), (3,
                            2, -1), (0, -2, -1), (-1, -1, 2), (-3, -1, 1), (-1, 3, -2), (-2, 2, -2), (3, -3, -3), (-1,
                                1, -3), (-3, -2, -3), (3, 3, -3), (3, 3, -1), (3, -1, 3), (-1, 3, 0), (-2, -2, 2), (-3,
                                    -1, 3), (-2, 2, 2), (0, 0, -1), (3, 2, 2), (-2, -2, 1), (-2, 1, 0), (3, -1, 1), (2,
                                        0, 3), (3, 1, 0), (3, -3, -1), (2, -2, -3), (-3, 1, 0), (-3, -2, -2), (-3, 1,
                                            -2), (-1, 2, 1), (-2, -1, 2), (2, 1, -1), (1, 3, -1), (1, 3, 3), (2, 2, -2),
                                        (-1, 2, -3), (0, 3, 3), (2, 1, 3), (1, 0, -2), (2, 3, 2), (2, 0, -1), (1, 0,
                                            -3), (-3, 2, 1), (0, 0, 3), (2, -2, -2), (-3, -1, -1), (-3, 1, -1), (-3, -1,
                                                -2), (0, -3, -3), (2, 1, 1), (3, -1, -1), (0, -1, 0), (3, 0, -1), (2, 3,
                                                    -2), (1, -1, 3), (-1, -1, 1), (3, -2, -2), (-1, -3, -3), (0, 3, -2),
                                                (0, 0, -3), (3, 2, 3), (-2, 0, -1), (-2, 0, -3), (2, 0, 2), (2, -3, 2),
                                                (-1, -1, 0), (-3, 1, 3), (-1, 2, 0), (-2, -3, -2), (2, 2, 1), (1, 3,
                                                    -3), (-2, -3, -1), (-3, 2, -2), (-3, -2, 3), (0, -1, -1), (1, 3, 2),
                                                (2, -1, 0), (-3, -3, 0), (2, 0, -2), (1, -3, -1), (2, -1, -1), (2, -3,
                                                    -3), (3, -1, -2), (2, 3, 1), (-2, 0, 1), (-1, 2, -2), (3, -3, -2),
                                                (2, -1, -3), (-3, 2, 2), (0, 0, 2), (2, 1, 0), (3, 0, -3), (-3, -1, 0),
                                                (0, -3, -2), (3, 3, 2), (-2, 3, -3), (-3, -2, 1), (-1, 2, 3), (-3, 3,
                                                    2), (3, -2, 1), (2, 0, -3), (-1, -3, -2), (2, -3, 3), (3, -1, 0),
                                                (2, 1, 2), (2, -1, 3), (-1, -3, 0), (3, 2, 0), (-3, 2, 0), (-3, 0, -3),
                                                (3, 1, -1), (-1, 1, 3), (-3, 1, 2), (-3, 0, -2), (-2, -1, -1), (-3, 1,
                                                    1), (-2, 0, 3), (3, -2, 0), (3, 3, -2), (-1, -2, -1), (-2, 2, -1),
                                                (-3, -3, 3), (-2, -3, 0), (3, 0, -2), (-1, 0, 0), (-2, -3, -3), (-1, 3,
                                                    -3), (-2, -2, -2), (2, -2, 2), (3, 2, -3), (0, 0, 1), (0, 2, -3),
                                                (2, 2, 3), (1, -2, 2), (-1, 3, 3), (3, 3, 1), (-3, 2, -1), (-3, -1, 2),
                                                (2, -2, 1), (-1, -1, -3), (-2, -1, 3), (-1, 3, 1), (1, 1, 1), (-2, -2,
                                                    -3), (1, -1, -3), (-3, 0, 2), (-3, 3, -1), (-1, -2, 2), (1, 3, 1),
                                                (2, 3, -3), (-3, 2, -3), (-2, 3, -2), (-2, 3, -1), (2, 3, -1), (-2, 2,
                                                    1), (-2, -3, 1), (1, -3, 2), (1, 0, 2), (-1, 1, -2), (1, 3, 0), (2,
                                                        -1, -2), (-2, 2, -3), (-3, -3, 2), (3, 1, -2), (0, 3, 2), (-1,
                                                            0, 3), (3, 3, 3), (1, -1, -1), (-2, 0, -2), (-3, 3, 1), (0,
                                                                -2, 1), (0, 0, 0), (1, -3, -3), (-3, 3, 3), (-2, 0, 2),
                                                            (2, 2, 2), (0, -1, 1), (-1, 1, 2), (3, -2, 3), (-1, -3, 1),
                                                            (3, -3, 3), (-2, 2, 0)]
        self.assertListEqual(true_ops, mate_ops)







if __name__ == "__main__":
    unittest.main(verbosity=2)
